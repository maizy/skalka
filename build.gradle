buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:1.0.1'
  }
}

plugins {
  id 'java'
  id 'maven'
  id 'scala'
  id 'com.github.maiflai.scalatest' version '0.22'
  id 'com.github.johnrengelman.shadow' version '2.0.4'
}

ext {
  scalaMajorVersion = '2.12'
  scalaMinorVersion = '6'
  scalaVersion = "${scalaMajorVersion}.${scalaMinorVersion}"
  catsVersion = '1.1.0'
  graalvmVersion = '1.0.0-rc9'
}

group = 'space.maizy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

task wrapper(type: Wrapper) {
  gradleVersion = '4.7'
  distributionType = 'all'
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'scala'
  apply plugin: 'scalaStyle'
  apply plugin: 'com.github.maiflai.scalatest'

  repositories {
    mavenCentral()
  }

  dependencies {
    compile "org.scala-lang:scala-library:${scalaVersion}"
    compile "org.scala-lang:scala-reflect:${scalaVersion}"
    compile "org.typelevel:cats-core_${scalaMajorVersion}:${catsVersion}"
    compileOnly "com.oracle.substratevm:svm:${graalvmVersion}"
  }

  scalaStyle {
    configLocation = "$rootProject.projectDir/scalastyle-config.xml"
    includeTestSourceDirectory = true
    source = 'src/main/scala'
    testSource = 'src/test/scala'
  }

  test {
    dependsOn scalaStyle
  }

  tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
        '-Xlint:_',
        '-feature',
        //'-Xfatal-warnings',
        '-Ypartial-unification',
        '-Ywarn-dead-code',
        '-Ywarn-inaccessible',
        '-Ywarn-infer-any',
        '-Ywarn-nullary-override',
        '-Ywarn-nullary-unit',
        '-Ywarn-numeric-widen'
    ]
  }
}

project('skalka-core') {
  dependencies {
    testCompile "org.scalatest:scalatest_${scalaMajorVersion}:3.0.4"
    testRuntime 'org.pegdown:pegdown:1.4.2'
  }
}

def applyCliToolOptions = {
  Project p, String mainClass, List<String> nativeResource = new ArrayList(),
  boolean enableHttps = false ->
  p.with {

    apply plugin: 'application'
    mainClassName = mainClass
    apply plugin: 'com.github.johnrengelman.shadow'

    jar {
      manifest {
        attributes 'Main-Class': mainClass
      }
    }

    shadowJar {
      classifier ''
    }

    dependencies {
      compile project(':skalka-core')
    }

    task buildNative(type:Exec) {
      doFirst {
        mkdir "${buildDir}/native"
      }

      def additionalOptions = nativeResource.collect { '-H:IncludeResources=' + it }
      if (enableHttps) {
        additionalOptions.add('--enable-http')
        additionalOptions.add('--enable-https')
        additionalOptions.add('--enable-url-protocols=http,https')
        additionalOptions.add('--enable-all-security-services')
      }
      workingDir "${buildDir}/libs"
      def nativeImageArgs = ['native-image', "-H:Path=${buildDir}/native"] + additionalOptions + ['-jar', p.name + '.jar']
      executable '/usr/bin/env'
      args (nativeImageArgs)
    }

    task checkNativeImage {
      doLast {
        def proc = '/usr/bin/env native-image --version'.execute()
        proc.waitFor()
        if (proc.exitValue() != 0) {
          throw new RuntimeException('native-image not in your PATH.\n' +
            'To fix it, do something like:\n' +
            'export "PATH=/path/to/graalvm-ee/Contents/Home/bin:$PATH"')
        }
        // TODO: version check
      }
    }

    buildNative.dependsOn(checkNativeImage, shadowJar)
  }
}

def applyLogging = {Project p ->
  p.with {
    dependencies {
      compile "ch.qos.logback:logback-classic:1.2.3"
      compile "com.typesafe.scala-logging:scala-logging_${scalaMajorVersion}:3.9.0"
    }
  }
}

project('aws-test') {
  applyCliToolOptions(it, 'space.maizy.skalka.AwsTestApp', ['.*amazonaws.*', 'logback.xml'], true)
  applyLogging(it)

  dependencies {
    compile 'com.amazonaws:aws-java-sdk-s3:1.11.328'
  }
}

project('hello-world-test') {
  applyCliToolOptions(it, 'space.maizy.skalka.HelloWorldTestApp', ['logback.xml'])
  applyLogging(it)
}


project('jline-test') {
  applyCliToolOptions(it, 'space.maizy.skalka.JLineTestApp', [".*jline.*"])
  def jLineVersion = '3.8.0'
  dependencies {
    compile "org.jline:jline-terminal:$jLineVersion"
    compile "org.jline:jline-reader:$jLineVersion"
  }
}

project('ahc-test') {
  applyCliToolOptions(it, 'space.maizy.skalka.ahctest.AhcTestApp', [], true)

  dependencies {
    compile 'org.apache.httpcomponents:httpclient:4.5.5'  //version used in aws-java-sdk-core:1.11.328
  }
}
